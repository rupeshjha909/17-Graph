//cycle detection in undirected graph using dsu
//union by rank means attach the smaller tree with bigger tree always


class graph
{
	int V;
	list<pair<int, int> >l;
public:
	graph(int V)
	{
		this ->V = V;
	}

	void addEdge(int u, int v)
	{
		l.push_back(make_pair(u, v));
	}

	//find
	int findset(int i, map<int, int> &parent)
	{
		//base case
		if (parent[i] == -1)
			return i;
		return parent[i] = findset(parent[i], parent);
	}

	//union
	void unionset(int x, int y, map<int, int> &parent, map<int, int> &rank)
	{
		int s1 = findset(x, parent);
		int s2 = findset(y, parent);
		if (s1 != s2)
		{
			if (rank[s1] < rank[s2]) {
				parent[s1] = s2;
				rank[s2] += rank[s1];
			}
			else
			{
				parent[s2] = s1;
				rank[s1] += rank[s2];
			}
		}
	}

	bool contains_cycle()
	{
		//dsu logic to check if graph contains cycle or not

		//in begining assume each node is parent of its same node
		map<int, int> parent;
		map <int, int> rank;

		for (int i = 0; i < V; i++)
		{
			parent[i] = -1;//-1 means parent of same node
			rank[i] = 1;
		}
		//iterate over the edge list
		for (auto edge : l)
		{
			int i = edge.first;
			int j = edge.second;

			int s1 = findset(i, parent);
			int s2 = findset(j, parent);

			if (s1 != s2)
				unionset(s1, s2, parent, rank);
			else
			{
				cout << "same parents " << s1 << " and " << s2 << endl;
				return true;
			}
		}
		return false;
	}
};

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	graph g(4);
	g.addEdge(0, 1);
	g.addEdge(1, 2);
	g.addEdge(2, 3);
	//g.addEdge(3, 0);
	cout << g.contains_cycle() << endl;
}
