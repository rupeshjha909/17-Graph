vector<int> bellmanford(int n, int src, vector<vector<int>> edges) {
    vector<int> dist(n + 1, INT_MAX);
    dist[src] = 0;

    //relax all edges (v-1) timeshttps://leetcode.com/problems/network-delay-time/discuss/
    for (int i = 0; i < n - 1; i++) {
        //goto every edge and relax it
        for (auto edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int wt = edge[2];

            if (dist[u] != INT_MAX and dist[u] + wt < dist[v]) {
                dist[v] = dist[u] + wt;
            }
        }
    }
    //negative wt cycle
    for (auto edge : edges) {
        int u = edge[0];
        int v = edge[1];
        int wt = edge[2];
        if (dist[u] != INT_MAX and dist[u] + wt < dist[v]) {
            cout << "negative wt cycle found";
            exit(0);
        }
    }
    return dist;
}

int main()
{
    int n, m;
    cin >> n >> m;

    //edge list
    vector<vector<int>> edges;
    for (int i = 0; i < m; i++) {
        int u, v, wt;
        cin >> u >> v >> wt;
        edges.push_back({u, v, wt});
    }

    //bellmanford algo
    vector<int> distance = bellmanford(n, 1, edges);
    for (int i = 1; i <= n; i++) {
        cout << "node " << i << " is at dist " << distance[i] << endl;
    }
}
