// Function to return Breadth First Search Traversal of given graph.
    public ArrayList<Integer> bfs(ArrayList<ArrayList<Integer>> adjacencyList) {
        // code here
        // Set to track visited nodes
        Set<Integer> visited = new HashSet<>();
        
        // Queue for BFS traversal
        Queue<Integer> queue = new LinkedList<>();
        int src=0;
        
        // Add source to queue and mark as visited
        queue.add(src);
        visited.add(src);
        ArrayList<Integer> ans=new ArrayList<>();
        
        //System.out.print("BFS traversal starting from " + src + ": ");
        
        while (!queue.isEmpty()) {
            var node = queue.poll();
            ans.add(node);
            
            // Get neighbors of current node
            List<Integer> neighbors = adjacencyList.get(node);
            if (neighbors != null) {
                for (Integer neighbor : neighbors) {
                    if (!visited.contains(neighbor)) {
                        queue.add(neighbor);
                        visited.add(neighbor);
                    }
                }
            }
        }
        //System.out.println();
        return ans;
    }



class Solution
{
public:
	// Function to find the shortest path from source to all other nodes
	vector<int> shortestPath(vector<vector<int>> &adj, int src)
	{
		// code here
		int v = adj.size();
		vector<int> dist(v,INT_MAX);
		queue<int> q;
		q.push(src);
		dist[src] = 0;
		while(!q.empty()){
			int node = q.front();
			q.pop();
			for(auto neighbour:adj[node]){
				if(dist[neighbour]==INT_MAX){
					dist[neighbour] = dist[node] + 1;
					q.push(neighbour);
				}
			}
		}
		return dist;
	}
};


int main()
{
	// Redirect input and output
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	// input for this
	int v, e;
	cin >> v >> e;
	vector<vector<int>> adj(v);
	for(int i=0;i<e;i++){
		int u, v;
		cin >> u >> v;
		adj[u].pb(v);
		adj[v].pb(u);
	}

	Solution s;
	vector<int> dist = s.shortestPath(adj, 0);
	for (int i = 0; i < v;i++)
	{
		cout <<"dist from 0 to " << i << " is " << dist[i] << endl;
	}
	return 0;
}
