template < typename T>

class graph
{
	map < T, list<T> >l;
public:
	void addEdge(int x, int y)//assume edges are bidirectional
	{
		l[x].push_back(y);
		l[y].push_back(x);
	}

	void bfs(T src)
	{
		map < T, int> dist;//created for marking distance
		queue<T> q;

		//all other nodes except src is infinity
		for (auto node_pair : l)
		{
			T node = node_pair.first;
			dist[node] = INT_MAX;
		}

		q.push(src);
		dist[src] = 0;

		while (!q.empty())
		{
			T node = q.front();
			q.pop();
			//cout << node << " ";
			for (auto nbr : l[node])//l[node] gives the value of that node
			{
				if (dist[nbr] == INT_MAX) //if that node is not visited
				{
					q.push(nbr);
					//mark that neighbour distance that is parent distance + 1
					dist[nbr] = dist[node] + 1;
				}
			}
		}

		//print dist to every node
		for (auto node_pair : l)
		{
			T node = node_pair.first;
			int d = dist[node];
			cout << "Node " << node << " dist from src " << d << endl;
		}
	}
};

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	graph<int> g;
	g.addEdge(0, 1);
	g.addEdge(0, 4);
	g.addEdge(1, 2);
	g.addEdge(2, 4);
	g.addEdge(2, 3);
	g.addEdge(3, 4);
	g.addEdge(3, 5);
	g.bfs(0);
}
