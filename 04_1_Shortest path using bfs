== Shortest path algorithm

class graph {
	map < int, list<int> >l;
public:
	void addEdge(int x, int y) {
		l[x].push_back(y);
		l[y].push_back(x);
	}

	void bfs(int src) {
		map<int, int> dist;
		queue<int> q;
		for (auto nbr : l) {
			dist[nbr.first] = INT_MAX;
		}

		q.push(src);
		dist[src] = 0;

		while (!q.empty()) {
			auto node = q.front();
			q.pop();
			//cout << node << " ";
			for (auto nbr : l[node]) {
				if (dist[nbr] == INT_MAX) {
					q.push(nbr);
					dist[nbr] = dist[node] + 1;
				}
			}
		}
		for (auto p : dist) {
			int d = dist[p.first];
			cout << "node" << p.first << " d from src " << d << endl;
		}
	}
};

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	graph g;
	g.addEdge(0, 1);
	g.addEdge(0, 3);
	g.addEdge(1, 2);
	g.addEdge(2, 3);
	g.addEdge(3, 4);
	g.addEdge(4, 5);
	g.bfs(0);
}
