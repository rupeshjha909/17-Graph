template < typename T>
class graph
{
	map < T, list<T> >l;
public:
	void addEdge(int x, int y)//assume edges are bidirectional
	{
		l[x].push_back(y);
		l[y].push_back(x);
	}

	void dfs_helper(T src, map<T, bool> &visited)
	{
		//recursive function that will traverse the graph
		cout << src << " ";
		visited[src] = true;
		//go to all nbr of that node one by one that is not visited in the nbr of src
		for (auto nbr : l[src])
		{
			if (!visited[nbr])//if not visited then visit it
			{
				dfs_helper(nbr, visited);//go and visit the neighbour
			}
		}
	}

	void dfs(T src)
	{
		map<T, bool> visited;
		//mark all the nodes as not visited in the begining
		for (auto p : l)//this initialization is done only once but the function should be recursive so we have made dfs helper function
		{
			T node = p.first;
			visited[node] = false;
		}
		//call the helper function
		dfs_helper(src, visited);
	}
};

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	graph<int> g;
	g.addEdge(0, 1);
	g.addEdge(1, 2);
	g.addEdge(2, 3);
	g.addEdge(3, 4);
	g.addEdge(4, 5);
	g.addEdge(3, 0);
	g.dfs(0);
}
