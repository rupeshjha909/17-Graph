class graph
{
	map<int, list<int>> l;

public:
	bool isCyclicBfs(vector<vector<int>>& adjList, int src, int n)
	{
		queue<int> q;
		vector<bool> vis(n, false);
		vector<int> parent(n, -1);
		
		q.push(src);
		vis[src] = true;
		
		while (!q.empty())
		{
			auto node = q.front();
			q.pop();
			for (auto nbr : adjList[node])
			{
				if (!vis[nbr])
				{
					vis[nbr] = true;
					parent[nbr] = node;
					q.push(nbr);
				}
				else if (parent[node] != nbr)	
				{
					return true;
				}
			}
			
		}
		return false;
	}
};

int main()
{
	// Redirect input and output
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	
	// Define edges directly as a vector of vectors
	vector<vector<int>> edges = {
		{0, 1},
		{0, 2},
		{0, 3},
		{1, 2},
		{3, 4}
	};
	
	int n = 5; // Number of nodes (0-4)
	vector<vector<int>> adjList(n); // n is number of nodes
	for (auto &edge : edges)
	{
		adjList[edge[0]].push_back(edge[1]);
		adjList[edge[1]].push_back(edge[0]); // For undirected graph
	}
	graph g;
	cout << "Is cycle present? " << (g.isCyclicBfs(adjList, 0, n) ? "Yes" : "No") << endl;

	return 0;
}
