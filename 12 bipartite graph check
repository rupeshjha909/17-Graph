std::vector<int> gr[N];//array of vector
int vis[N];
bool odd_cycle = 0;
//dfs has current assignment,parent and colour
void dfs(int cur, int par, int col)
{
    vis[cur] = col;
    //lets go to all child in this graph
    for (auto child : gr[cur])
    {
        if (vis[child] == 0)//if visited[child]==0 means not visited then make cur as parent
            dfs(child, cur, 3 - col);
        else if (child != par and col == vis[child])//if already visited and colour of current vertex==visited of next vertex
        {
            //backedge and odd length cycle
            odd_cycle = 1;
        }
    }
    return;
}

void solve()
{
    //n--number of vertices
    //m--number of edges
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; i++)
    {
        int x, y;
        cin >> x >> y;
        //assume birdirection edges
        gr[x].pb(y);
        gr[y].pb(x);
    }
    dfs(1, 0, 1);
    if (odd_cycle)
        cout << "not bipartite\n";
    else
        cout << "bipartite";
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    solve();
}
