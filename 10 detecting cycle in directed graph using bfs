template<typename T>
class Graph
{
  map<T, list<T> > adjList;

public:
  void addEdge(T u, T v, bool bidir = true)
  {
    adjList[u].push_back(v);
    if (bidir)
    {
      adjList[v].push_back(u);
    }
  }

  bool isCyclic()
  {
    map<T, bool> visited;
    map<T, int> indegree;
    queue<T> q;

    for (auto x : adjList) {
      visited[x.first] = false;
      indegree[x.first] = 0;
    }
    for (auto x : adjList) {
      for (auto v : adjList[x.first]) {
        indegree[v]++;
      }
    }
    for (auto x : adjList) {
      if (indegree[x.first] == 0) {
        q.push(x.first);
        visited[x.first] = true;
      }

    }

    while (!q.empty()) {
      auto cur = q.front(); q.pop();
      for (auto nbr : adjList[cur]) {
        indegree[nbr]--;
        if (indegree[nbr] == 0) {
          q.push(nbr);
          visited[nbr] = true;
        }
      }
    }
    //if any node not visited means there is cycle otherwie there is no cycle
    for (auto x : adjList) {
      if (visited[x.first] == 0)
        return true;
    }
    return false;
  }
};

int main()
{
  Graph<int> g;
  g.addEdge(0, 1, false);
  g.addEdge(1, 2, false);
  g.addEdge(2, 3, false);
  g.addEdge(3, 4, false);
  g.addEdge(4, 5, false);
  //g.addEdge(1, 5, false);
  g.addEdge(5, 6, false);
  //g.addEdge(4, 2, false);//back edge

  if (g.isCyclic())
    cout << "cycle present";
  else
    cout << "cycle not found";
}
