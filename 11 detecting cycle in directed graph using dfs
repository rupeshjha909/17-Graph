
class graph
{
public:
	/**
	 * Detects a cycle in a directed graph using DFS.
	 *
	 * @param adjList The adjacency list of the graph.
	 * @param node The current node being visited.
	 * @param visited Vector to track visited nodes.
	 * @param instack Vector to track nodes in the current DFS recursion stack.
	 * @return true if a cycle is detected, false otherwise.
	 */
	bool isCyclicUsingDFSHelper(vector<vector<int>> &adjList, int node, vector<bool> &visited, vector<bool> &instack)
	{
		visited[node] = true;      // Mark the current node as visited
		instack[node] = true;      // Mark the current node as part of the recursion stack
		for (auto nbr : adjList[node])
		{
			// If the neighbor is already in the recursion stack, a cycle is found
			if(instack[nbr])
			{
				return true;
			}
			// If the neighbor hasn't been visited, recursively visit it
			else if (!visited[nbr])
			{
				if (isCyclicUsingDFSHelper(adjList, nbr, visited, instack))
				{
					return true;
				}
			}
		}
		instack[node] = false;     // Remove the node from the recursion stack before returning
		return false;
	}

	/**
	 * Wrapper function to check for cycles in the entire graph.
	 * Calls the helper for each unvisited node (handles disconnected graphs).
	 *
	 * @param adjList The adjacency list of the graph.
	 * @param v Number of vertices in the graph.
	 * @return true if a cycle is detected, false otherwise.
	 */
	bool isCyclicUsingDFS(vector<vector<int>> &adjList, int v)
	{
		vector<bool> visited(v, false);
		vector<bool> inStack(v, false);
		for (int i = 0; i < v; i++)
		{
			if (!visited[i])
			{
				if (isCyclicUsingDFSHelper(adjList, i, visited, inStack))
				{
					return true;
				}
			}
		}
		return false;
	}
};

int main()
{
	// Redirect input and output
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	// Define edges directly as a vector of vectors
	vector<vector<int>> edges = {
		 {0, 1},
		 {0, 2},
		 {0, 3},
		 {1, 2},
		 {3, 2}};

	int n = 5;							  // Number of nodes (0-4)
	vector<vector<int>> adjList(n); // n is number of nodes
	for (auto &edge : edges)
	{
		adjList[edge[0]].push_back(edge[1]);
		adjList[edge[1]].push_back(edge[0]); // For undirected graph
	}
	graph g;
	cout << "Is cycle present? " << (g.isCyclicUsingDFS(adjList, n) ? "Yes" : "No") << endl;

	return 0;
}
