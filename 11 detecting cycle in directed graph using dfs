template<typename T>
class Graph
{
  map<T, list<T> > adjList;

public:
  void addEdge(T u, T v, bool bidir = true)
  {
    adjList[u].push_back(v);
    if (bidir)
    {
      adjList[v].push_back(u);
    }
  }

  bool isCyclicHelper(T node, map<T, bool> &visited, map<T, bool> &instack)
  {
    //processing the current node- visited,instack
    visited[node] = true;
    instack[node] = true;

    //explore the neighbour of the node
    for (auto neighbour : adjList[node])
    {
      //two things can happen
      //the current node is not visited but its further branch is leading to a cycle
      //1st case--
      if (instack[neighbour] == true)
        return true;

      //neighbour is not visited but it can lead to a cycle
      if (visited[neighbour] == false)
      {
        bool cycle_mila = isCyclicHelper(neighbour, visited, instack);
        if (cycle_mila)
          return true;
      }
    }
    //going to pop out the node,instack=false
    instack[node] = false;
    return false;
  }
  //in this we check whether graph has backedge or not
  bool isCyclic()
  {
    map<T, bool> visited;
    map<T, bool> instack;

    //check for cycle in each dfs tree
    for (auto i : adjList)
    {
      auto node = i.first; //current node
      if (!visited[node]) //if not visited
      {
        bool cyclePresent = isCyclicHelper(node, visited, instack);
        if (cyclePresent)
          return true;
      }
    }
    return false;
  }
};

int main()
{
  Graph<int> g;
  g.addEdge(0, 1, false);
  g.addEdge(1, 2, false);
  g.addEdge(2, 3, false);
  g.addEdge(3, 4, false);
  g.addEdge(4, 5, false);
  //g.addEdge(1, 5, false);
  g.addEdge(5, 6, false);
  //g.addEdge(4, 2, false);//back edge

  if (g.isCyclic())
    cout << "cycle present";
  else
    cout << "cycle not found";
}
