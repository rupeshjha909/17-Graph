template<typename T>
class Graph
{
    map<T, list<T> > adjList;
    int V;

public:
    Graph(int v)
    {
        V = v;
    }

    void addEdge(T u, T v, bool bidir = true)
    {
        adjList[u].push_back(v);
        if (bidir)
        {
            adjList[v].push_back(u);
        }
    }

    bool isCyclicHelper(T node, map<T, bool> &visited, T parent)
    {
        visited[node] = true;
        for (T neigbour : adjList[node])
        {
            if (!visited[neigbour])
            {
                bool cycledetected = isCyclicHelper(neigbour, visited, node);
                if (cycledetected)
                    return true;
            }

            //if neighbour is already visited
            else if (neigbour != parent)
                return true;
        }
        return false;
    }

    //check for undirected graph
    bool isCyclicDFS()
    {
        map<T, bool> visited;

        //you can call for finding cycle in every dfs tree
        for (auto i : adjList)
        {
            T node = i.first;
            if (!visited[node])
            {
                bool ans = isCyclicHelper(node, visited, node);
                if (ans == true)
                    return true;
            }
        }
        return false;
    }
};

int main()
{
    Graph<int> g(4);
    g.addEdge(1, 2);
    g.addEdge(1, 4);
    g.addEdge(4, 3);
    if (g.isCyclicDFS())
        cout << "cyclic graph";
    else
        cout << "non cyclic graph";
}
