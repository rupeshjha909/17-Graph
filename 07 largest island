class Solution {
public:
    int cs;
    void dfs(vector<vector<int>>& grid,vector<vector<bool>> &visited,int i,int j,int r,int c){
        visited[i][j]=true;

//in this we are considering the island in 4 direction in only 4 direction
        int dx[]={1,-1,0,0};
        int dy[]={0,0,1,-1};
//for considering the diagonal also need modify the dx and dy
// Include diagonal movements (8 directions total)
//int dx[] = {0, 0, 1, -1, 1, 1, -1, -1}; // Right, left, down, up, down-right, down-left, up-right, up-left
//int dy[] = {1, -1, 0, 0, 1, -1, 1, -1};
    
        for(int k=0;k<4;k++){
            int nx=i+dx[k];
            int ny=j+dy[k];
            
            if(nx>=0 and ny>=0 and nx<r and ny<c and grid[nx][ny]==1 and visited[nx][ny]== 0){
                dfs(grid,visited,nx,ny,r,c);
                cs++;
            }
        }
        
        return;
    }
    
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int r=grid.size();
        int c=grid[0].size();
        vector<vector<bool>> visited(r,vector<bool>(c,false));
        int largest=0;
        
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(!visited[i][j] and grid[i][j]==1){
                    cs=1;
                    dfs(grid,visited,i,j,r,c);
                    largest=max(largest,cs);
                }
            }
        }
        return largest;
    }
};
