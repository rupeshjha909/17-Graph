int dfs(vector<vector<int>> &grid, vector < vector < bool>>&visited, int curs, int cure, int r, int c) {
	visited[curs][cure] = true;
	int cs = 1;
	int dx[] = {1, -1, 0, 0};
	int dy[] = {0, 0, 1, -1};

	for (int k = 0; k < 4; k++) {
		int nx = curs + dx[k];
		int ny = cure + dy[k];

		if (nx >= 0 and nx<r and ny >= 0 and ny < c and grid[nx][ny] == 1 and visited[nx][ny] == 0) {
			int sub = dfs(grid, visited, nx, ny, r, c);
			cs += sub;
		}
	}
	return cs;
}

int largest_island(vector<vector<int>> grid) {
	int r = grid.size();
	int c = grid[0].size();

	vector <vector<bool>> visited(r, vector<bool>(c, false));
	int largest = 0;
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			if (!visited[i][j] and grid[i][j] == 1) {
				int size = dfs(grid, visited, i, j, r, c);
				largest = max(largest, size);
			}
		}
	}
	return largest;
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	vector<vector<int>> grid = {
		{1, 0, 0, 1, 0},
		{1, 0, 1, 0, 0},
		{0, 0, 1, 0, 1},
		{1, 0, 1, 1, 1},
		{1, 0, 1, 1, 0}
	};
	cout << largest_island(grid) << endl;
}
